@page "/chat"
@rendermode InteractiveServer
@inject Microsoft.Extensions.Configuration.IConfiguration _config

<PageTitle>Chat</PageTitle>

<h1>Chat</h1>

<div class="container d-flex flex-column row">
    <div class="p-2 col">
        @foreach (var item in Messages)
        {
            <div class="w-100 d-flex flex-column">
                @if (item.IsUser == true)
                {
                    <div class="parent p-2 rounded w-100 d-flex justify-content-end">
                        <b>@item.Content</b>
                    </div>
                }
                @if (item.IsUser == false)
                {
                    <div class="p-2 rounded w-100 d-flex justify-content-start" style="background-color: #f9f9f9; margin-bottom: 2%">
                        @if (item.Content != null)
                        {
                            @((MarkupString)item.Content)
                        }
                    </div>
                }
            </div>
        }
    </div>
    <div class="sticky-bottom w-100 p-2 rounded mx-auto dflex row">
        <textarea class="form-control w-75 col-2" rows="1" @bind="message.Content">
        </textarea>
        <button class="btn btn-primary ml-auto col-3" style="float: right" @onclick="SemanticKernelClient">Send Request</button>
    </div>
</div>


@code {

    @using Microsoft.SemanticKernel;
    @using Microsoft.SemanticKernel.ChatCompletion;
    @using System.ComponentModel

    public class Message
    {
        public string? Content { get; set; }
        public bool IsUser { get; set; } = true;
    }

    public List<Message> Messages { get; set; } = new List<Message>();

    public Message message { get; set; } = new Message();

    private async Task SemanticKernelClient()
    {
        // Azure OpenAI app settings
        string deploymentName = _config["OpenAI:DEPLOYMENT_NAME"];
        string endpoint = _config["OpenAI:ENDPOINT"];
        string apiKey = _config["OpenAI:API_KEY"];
        string modelId = _config["OpenAI:MODEL_ID"];

        // Semantic Kernel builder
        var builder = Kernel.CreateBuilder();

        // Chat completion service
        builder.Services.AddAzureOpenAIChatCompletion(
            deploymentName: deploymentName,
            endpoint: endpoint,
            apiKey: apiKey,
            modelId: modelId
        );

        var kernel = builder.Build();

        // Create prompt template
        var chat = kernel.CreateFunctionFromPrompt(
                    @"{{$history}}
                    User: {{$request}}
                    Assistant: ");

        ChatHistory chatHistory = new("""You are a helpful assistant that answers questions about my data""");

        var chatResult = kernel.InvokeStreamingAsync<StreamingChatMessageContent>(
                chat,
                new() {
                        { "request", message.Content },
                        { "history", string.Join("\n", chatHistory.Select(x => x.Role + ": " + x.Content)) }
                       }
                );

        string response = "";
        await foreach (var chunk in chatResult)
        {
            response += chunk;
        }

        // Append messages to chat history
        chatHistory.AddUserMessage(message.Content!);
        chatHistory.AddAssistantMessage(response);

        // Add messages to list
        Messages.Add(new Message {  Content = message.Content, IsUser = true });
        Messages.Add(new Message { Content = response, IsUser = false });
    }
}
